# -*- coding: utf-8 -*-
"""Predictive Anlysis wieght and height Body.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x9oyEq_6k7y2vDlHi8pca1o_q8bOrK-q

##Rahmat Hidayat
##Submission Dicoding Predictive analysis weight and height Body

##Pertama, import library yang dibutuhkan. Anda dapat melakukannya di awal, atau di tiap kode sel.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""# Crawling Data"""

url = "https://github.com/Rahmathidayat4299/data-machine-learning/raw/refs/heads/master/SOCR-HeightWeight.csv"
body = pd.read_csv(url)
body

"""# Konversi Tinggi"""

body['Height(cm)'] = body['Height(Inches)'] * 2.54

# Konversi berat dari pon ke kg
body['Weight(kg)'] = body['Weight(Pounds)'] * 0.453592
# Menghapus kolom asli setelah konversi
body.drop(columns=['Height(Inches)', 'Weight(Pounds)'], inplace=True)
# Menghitung BMI
body['BMI'] = body['Weight(kg)'] / ((body['Height(cm)'] / 100) ** 2)

# Menampilkan 5 baris pertama untuk melihat hasil konversi
print(body[['Height(cm)', 'Weight(kg)', 'BMI']].head())
# Menampilkan 5 baris pertama untuk melihat hasil konversi
print(body[[ 'Height(cm)','Weight(kg)']].head())
# Menyimpan hasil ke file CSV baru
body.to_csv("height_weight_converted.csv", index=False)

bodyconvert = "/content/height_weight_converted.csv"
bodyconvert = pd.read_csv(bodyconvert)
bodyconvert

"""# Cleaning Process Data"""

bodyconvert.describe()
checkbodynull = bodyconvert.isnull().sum()
checkbodyduplicate = bodyconvert.duplicated().sum()
checkbodynull
checkbodyduplicate

"""# Penanganan Outlier"""

# Menghapus baris yang mengandung NaN
bodyconvert.dropna(inplace=True)

# Menghitung Q1 dan Q3 untuk outlier
Q1 = bodyconvert[['Height(cm)', 'Weight(kg)']].quantile(0.25)
Q3 = bodyconvert[['Height(cm)', 'Weight(kg)']].quantile(0.75)

# Menghitung IQR
IQR = Q3 - Q1

# Menentukan batas bawah dan batas atas
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Menentukan outlier
outliers = bodyconvert[
    (bodyconvert['Height(cm)'] < lower_bound['Height(cm)']) |
    (bodyconvert['Height(cm)'] > upper_bound['Height(cm)']) |
    (bodyconvert['Weight(kg)'] < lower_bound['Weight(kg)']) |
    (bodyconvert['Weight(kg)'] > upper_bound['Weight(kg)'])
]

# Menampilkan jumlah outlier dan outlier itu sendiri
print("Jumlah outlier pada DataFrame:", len(outliers))
print(outliers)

"""# Normalisasi atau Standarisasi Data"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
bodyconvert[['Height(cm)', 'Weight(kg)']] = scaler.fit_transform(bodyconvert[['Height(cm)', 'Weight(kg)']])

"""# Supervised Learning dengan Regresi"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Misalkan 'bodyconvert' adalah DataFrame yang sudah bersih
# Memisahkan fitur dan target
X = bodyconvert[['Height(cm)', 'Weight(kg)']]  # ganti dengan fitur yang diinginkan
y = bodyconvert['BMI']  # ganti 'target' dengan kolom target yang ingin diprediksi

# Membagi data menjadi set pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Melatih model regresi
model = LinearRegression()
model.fit(X_train, y_train)

# Menguji model
y_pred = model.predict(X_test)

# Evaluasi model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"RÂ² Score: {r2}")
# Fungsi untuk prediksi BMI
def predict_bmi(height_cm, weight_kg):
    new_data = [[height_cm, weight_kg]]  # Format data input
    prediction = model.predict(new_data)  # Menggunakan model untuk memprediksi
    return prediction[0]  # Mengembalikan nilai prediksi

# Contoh data baru untuk diuji
new_height = 170 /100  # Tinggi dalam cm
new_weight = 65   # Berat dalam kg

# Melakukan prediksi
predicted_bmi = predict_bmi(new_height, new_weight)

print(f"Prediksi BMI untuk tinggi {new_height} cm dan berat {new_weight} kg adalah: {predicted_bmi:.2f}")

"""# Penyimpanan Model
# Simpan Model: Setelah model terlatih dan diuji, simpan model menggunakan pustaka seperti joblib atau pickle untuk digunakan di masa depan tanpa perlu melatih ulang.
"""

import joblib

# Simpan model ke file
joblib.dump(model, 'linear_regression_bmi_model.pkl')

"""# Pengujian Lanjutan
Validasi Silang (Cross-Validation): Gunakan teknik validasi silang untuk memastikan model tidak overfitting dan memiliki kinerja yang konsisten di berbagai subset data.
"""

from sklearn.model_selection import cross_val_score

scores = cross_val_score(model, X, y, cv=5)  # CV = 5 fold
print("Cross-Validation Scores:", scores)

import matplotlib.pyplot as plt
import numpy as np

# Membuat plot scatter
plt.figure(figsize=(10, 6))  # Ukuran figure yang lebih besar
plt.scatter(y_test, y_pred, alpha=0.6, edgecolors='w', s=100)  # 's' untuk ukuran titik dan 'alpha' untuk transparansi

# Garis referensi (garis diagonal)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--', lw=2, label='Garis Referensi')  # Lebar garis referensi

# Menambahkan label dan title
plt.xlabel('BMI Aktual', fontsize=14)
plt.ylabel('BMI Prediksi', fontsize=14)
plt.title('Prediksi BMI vs BMI Aktual', fontsize=16)

# Menambahkan grid untuk kemudahan membaca
plt.grid(color='gray', linestyle='--', linewidth=0.5)

# Menambahkan anotasi untuk beberapa titik
for i in range(0, len(y_test), int(len(y_test) / 10)):  # Menampilkan anotasi untuk 10 titik
    plt.annotate(f'{y_pred[i]:.2f}', (y_test.iloc[i], y_pred[i]), fontsize=9, ha='right')

# Menampilkan legenda
plt.legend()

# Menampilkan plot
plt.show()

def categorize_bmi(bmi):
    if bmi < 18.5:
        return 'Kekurangan Berat Badan'
    elif 18.5 <= bmi < 25:
        return 'Normal'
    elif 25 <= bmi < 30:
        return 'Kelebihan Berat Badan'
    else:
        return 'Obesitas'

# Tambahkan kolom kategori ke DataFrame
bodyconvert['BMICategory'] = bodyconvert['BMI'].apply(categorize_bmi)

# Menampilkan beberapa baris untuk melihat kategori
print(bodyconvert[['Height(cm)', 'Weight(kg)', 'BMI', 'BMICategory']].head())

import seaborn as sns

# Visualisasi distribusi kategori BMI
plt.figure(figsize=(10, 6))
sns.countplot(data=bodyconvert, x='BMICategory')
plt.title('Distribusi Kategori BMI')
plt.xlabel('Kategori BMI')
plt.ylabel('Jumlah')
plt.show()